[project]
name = "pypeh"
version = "0.0.1"
description = "A modular project with a core library and multiple adapters"
authors = [{ name = "VITO Health DMT" }]
requires-python = ">=3.10, <4.0.0"
readme = "README.md"
license = "MIT"
dependencies = [
    "linkml>=1.9.1",
	"peh-model",
	"pydantic-settings",
	"fsspec",
]

[project.optional-dependencies]
core = []
rocrate-adapter = ["rocrate"]
pandera-adapter = [
    "dataguard",
]
s3-adapter = ["s3fs"]
test-core = ["pytest>=8.2.0,<9"]

[dependency-groups]
test-core = [
    "pytest>=8.2.0,<9",
]
test-dataframe = [
    "dataguard",
]
test-rocrate = [
    "rocrate",
]
test-s3 = ["s3fs"]
dev = [
    "ruff>=0.4.4,<0.5",
    "black",
    "mypy",
    "isort",
]

[tool.uv]
default-groups = [
    "test-core",
    "dev",
]

[tool.uv.sources]
dataguard = { git = "https://github.com/eu-parc/dataguard", tag = "v0.1.2" }

[tool.hatch.build.targets.sdist]
include = [
    "src/pypeh/",
]

[tool.hatch.build.targets.wheel]
include = [
    "src/pypeh/",
]

[tool.hatch.build.targets.wheel.sources]
"src/pypeh" = "pypeh"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
pythonpath = [
  "src"
]
addopts = [
    "--import-mode=importlib",
]
markers = [
	"core: tests for core functionality",
    "dataframe: tests for dataframe-based adapters",
    "rocrate: tests for rocrate-based adapter",
    "interface: tests for shared interfaces",
]

[tool.ruff]
# Same as Black.
line-length  = 120
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable   = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# Exclude a variety of commonly ignored directories.
exclude = [
	".bzr",
	".direnv",
	".eggs",
	".git",
	".git-rewrite",
	".hg",
	".ipynb_checkpoints",
	".mypy_cache",
	".nox",
	".pants.d",
	".pyenv",
	".pytest_cache",
	".pytype",
	".ruff_cache",
	".svn",
	".tox",
	".venv",
	".vscode",
	"__pypackages__",
	"_build",
	"buck-out",
	"build",
	"dist",
	"node_modules",
	"site-packages",
	"venv",
]
